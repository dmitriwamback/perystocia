
console.log('ass')

const canvas = document.getElementById('backgroundgl');
canvas.width = 3000
canvas.height = 3000
const gl = canvas.getContext('webgl');

if (!gl) {
    console.error('Unable to initialize WebGL. Your browser may not support it.');
}

const vertices = [595.66796875, 1060.90625, 0, 594.37109375, 1063.7890625, 0, 613.14453125, 1047.3515625, 0, 632.84375, 1025.72265625, 0, 650.8203125, 981.52734375, 0, 657.83203125, 966.2734375, 0, 661.3515625, 943.421875, 0, 660.8125, 923.5078125, 0, 663.75, 897.43359375, 0, 657.65625, 879.64453125, 0, 652.25, 862.28515625, 0, 644.734375, 848.90625, 0, 631.171875, 837.3359375, 0, 625.76953125, 830.0078125, 0, 617.49609375, 823.24609375, 0, 611.74609375, 819.81640625, 0, 602.953125, 811.74609375, 0, 604.5546875, 802.03515625, 0, 632.66796875, 749.2265625, 0, 657.96484375, 759.83203125, 0, 677.9609375, 719.0390625, 0, 685.44921875, 703.98046875, 0, 699.33203125, 685.54296875, 0, 701.40625, 672.28125, 0, 692.67578125, 667.10546875, 0, 688.33203125, 677.0625, 0, 683.01953125, 692.265625, 0, 674.90625, 701.2265625, 0, 671.6953125, 706.67578125, 0, 675.33984375, 716.13671875, 0, 671.78515625, 717.171875, 0, 662.96484375, 714.9453125, 0, 650.75, 708.5234375, 0, 640.7421875, 719.83203125, 0, 641.77734375, 727.328125, 0, 637.6328125, 734.640625, 0, 633.93359375, 738.3671875, 0, 619.65625, 731.81640625, 0, 625.40234375, 716.61328125, 0, 632.1953125, 709.8359375, 0, 660.36328125, 656.57421875, 0, 683.3515625, 659.48046875, 0, 687.40234375, 651.3828125, 0, 691.02734375, 646.9375, 0, 716.234375, 662.19140625, 0, 720.48046875, 654.78515625, 0, 690.30859375, 634.80078125, 0, 671.10546875, 639.1953125, 0, 677.5546875, 563.71484375, 0, 714.01171875, 562.71484375, 0, 715.1953125, 529.7109375, 0, 739.6875, 529.80859375, 0, 732.7734375, 566.37890625, 0, 715.19921875, 583.03515625, 0, 713.51171875, 589.453125, 0, 694.5703125, 593.609375, 0, 699.81640625, 602.60546875, 0, 731.90625, 603.62109375, 0, 753.67578125, 567.33203125, 0, 738.28515625, 503.984375, 0, 723.640625, 502.50390625, 0, 718.22265625, 499.8515625, 0, 715.08984375, 491.55078125, 0, 716.7421875, 481.53515625, 0, 708.7265625, 478.671875, 0, 694.51171875, 481.83203125, 0, 697.578125, 490.29296875, 0, 688.7421875, 494.5703125, 0, 693.3828125, 504.890625, 0, 696.859375, 509.7890625, 0, 703.80859375, 513.6484375, 0, 702.30859375, 522.5625, 0, 701.3984375, 531.00390625, 0, 697.359375, 532.984375, 0, 695.21875, 534.21875, 0, 689.7421875, 532.4140625, 0, 675.26171875, 515.0078125, 0, 670.43359375, 509.03515625, 0, 668.12890625, 495.9453125, 0, 671.390625, 487.68359375, 0, 667.16796875, 480.16796875, 0, 662.71875, 470.890625, 0, 670.72265625, 469.6015625, 0, 689.12890625, 460.8828125, 0, 690.625, 435.05078125, 0, 730.58203125, 438.12109375, 0, 753.98828125, 437.02734375, 0, 777.234375, 411.20703125, 0, 816.0078125, 412.0703125, 0, 815.984375, 471.52734375, 0, 846.2578125, 471.453125, 0, 851.96484375, 472.453125, 0, 880.24609375, 449.265625, 0, 864.6953125, 436.83984375, 0, 858.28125, 432.03515625, 0, 859.9375, 427.3359375, 0, 880.5859375, 412.859375, 0, 879.6484375, 372.6328125, 0, 935.77734375, 372.9375, 0, 975.29296875, 339.3515625, 0, 981.12890625, 342.2890625, 0, 1037.65234375, 343.57421875, 0, 1067.53125, 385.89453125, 0, 1107.98828125, 384.8203125, 0, 1114.55859375, 415.03515625, 0, 1088.375, 444.93359375, 0, 1044.40234375, 438.1015625, 0, 1038.19140625, 447.22265625, 0, 1051.4921875, 458.7109375, 0, 1058.23828125, 459.16015625, 0, 1082.84375, 474.83203125, 0, 1083.50390625, 517.09375, 0, 1083.4453125, 525.23828125, 0, 1082.36328125, 532.3046875, 0, 1095.2421875, 536.5390625, 0, 1102.453125, 542.48828125, 0, 1103.22265625, 548.6484375, 0, 1100.10546875, 552.80078125, 0, 1093.7578125, 555.9140625, 0, 1090.75, 567.75, 0, 1087.9296875, 574.2890625, 0, 1088.453125, 579.33984375, 0, 1091.6015625, 583.48046875, 0, 1097.875, 573.44140625, 0, 1106.26953125, 564.078125, 0, 1108.43359375, 556.125, 0, 1114.85546875, 567.68359375, 0, 1115.671875, 572.6015625, 0, 1125.81640625, 559.5703125, 0, 1128.06640625, 558.97265625, 0, 1134.01171875, 563.26171875, 0, 1140.09765625, 566.9296875, 0, 1139.1640625, 576.49609375, 0, 1137.58203125, 581.078125, 0, 1132.9765625, 583.65625, 0, 1133.4765625, 591.45703125, 0, 1134.765625, 600.57421875, 0, 1131.51953125, 606.90625, 0, 1105.34765625, 603.37109375, 0, 1088.609375, 598.13671875, 0, 1082.78515625, 596.00390625, 0, 1082.23046875, 590.21875, 0, 1069.76953125, 590.8671875, 0, 1064.82421875, 592.0703125, 0, 1058.5546875, 598.75, 0, 1083.8125, 608.42578125, 0, 1123.7734375, 618.953125, 0, 1147.765625, 622.9140625, 0, 1205.54296875, 601.33203125, 0, 1224.08984375, 613.859375, 0, 1246.890625, 623.953125, 0, 1256.375, 629.7109375, 0, 1261.390625, 635.859375, 0, 1287.26171875, 634.91796875, 0, 1285.71875, 654.9140625, 0, 1322.19140625, 728.6953125, 0, 1327.51171875, 729.58203125, 0, 1323.31640625, 732.5859375, 0, 1317.76171875, 726.00390625, 0, 1309.57421875, 746.88671875, 0, 1303.9765625, 750.40625, 0, 1294.11328125, 749.5, 0, 1283.52734375, 749.0, 0, 1278.0546875, 750.3125, 0, 1292.953125, 783.60546875, 0, 1296.14453125, 796.0546875, 0, 1299.79296875, 810.35546875, 0, 1297.89453125, 822.625, 0, 1294.8828125, 838.421875, 0, 1286.46484375, 851.86328125, 0, 1282.7734375, 854.234375, 0, 1278.1640625, 850.68359375, 0, 1272.61328125, 841.4765625, 0, 1272.46875, 839.03125, 0, 1262.98046875, 841.8046875, 0, 1261.0625, 848.96484375, 0, 1254.66796875, 849.25, 0, 1265.4453125, 886.7890625, 0, 1257.4765625, 892.0546875, 0, 1247.53515625, 891.79296875, 0, 1208.80078125, 911.203125, 0, 1200.92578125, 898.9453125, 0, 1189.0234375, 905.96484375, 0, 1170.23046875, 904.765625, 0, 1159.38671875, 905.44921875, 0, 1153.796875, 908.046875, 0, 1155.43359375, 918.83203125, 0, 1174.5546875, 940.04296875, 0, 1168.41015625, 951.5, 0, 1168.28515625, 958.0, 0, 1152.6640625, 962.4296875, 0, 1135.21875, 971.390625, 0, 1110.62109375, 975.6328125, 0, 1075.515625, 981.93359375, 0, 1037.49609375, 981.9453125, 0, 1037.89453125, 981.59765625, 0, 1030.74609375, 970.6328125, 0, 1034.68359375, 957.71484375, 0, 1015.2421875, 957.66015625, 0, 1005.54296875, 958.29296875, 0, 1004.74609375, 949.46875, 0, 980.73828125, 939.50390625, 0, 981.98828125, 930.41015625, 0, 984.89453125, 924.234375, 0, 986.1171875, 918.98046875, 0, 980.69921875, 919.78515625, 0, 980.234375, 915.31640625, 0, 983.77734375, 914.58203125, 0, 982.08984375, 892.79296875, 0, 980.96875, 885.43359375, 0, 989.61328125, 872.3046875, 0, 943.84765625, 872.80078125, 0, 937.66796875, 870.51953125, 0, 941.1640625, 879.53125, 0, 936.8828125, 892.12890625, 0, 932.640625, 902.1796875, 0, 933.5546875, 910.5546875, 0, 929.62890625, 916.4609375, 0, 914.6328125, 918.5, 0, 909.9140625, 922.90625, 0, 910.359375, 933.7578125, 0, 923.30078125, 933.39453125, 0, 934.40234375, 933.27734375, 0, 933.68359375, 942.0703125, 0, 939.5703125, 949.64453125, 0, 942.57421875, 952.328125, 0, 938.30078125, 958.3046875, 0, 929.59375, 961.37109375, 0, 923.76953125, 965.80078125, 0, 910.953125, 964.4765625, 0, 905.7421875, 966.4765625, 0, 902.80859375, 975.2890625, 0, 901.53515625, 979.96484375, 0, 915.68359375, 982.5546875, 0, 919.42578125, 983.5, 0, 915.3125, 997.01953125, 0, 911.1796875, 1002.3984375, 0, 906.33203125, 1005.46484375, 0, 892.65625, 998.82421875, 0, 882.72265625, 993.3671875, 0, 880.6015625, 987.99609375, 0, 879.1953125, 967.06640625, 0, 878.30078125, 961.92578125, 0, 867.3046875, 952.04296875, 0, 860.66796875, 947.765625, 0, 856.94140625, 942.94140625, 0, 857.515625, 935.33984375, 0, 858.40234375, 923.21875, 0, 865.01953125, 921.1796875, 0, 857.48828125, 918.234375, 0, 851.1796875, 917.8125, 0, 854.265625, 908.55078125, 0, 857.046875, 897.625, 0, 852.14453125, 897.140625, 0, 839.26953125, 898.4140625, 0, 827.64453125, 898.640625, 0, 814.78515625, 896.453125, 0, 812.5, 891.51171875, 0, 806.14453125, 889.4375, 0, 797.51171875, 884.73828125, 0, 797.22265625, 881.34375, 0, 779.25390625, 878.44140625, 0, 762.2890625, 878.2890625, 0, 753.2734375, 877.43359375, 0, 743.703125, 881.3984375, 0, 740.49609375, 887.55859375, 0, 750.65625, 886.64453125, 0, 757.93359375, 889.0625, 0, 760.84765625, 889.2109375, 0, 765.35546875, 896.06640625, 0, 764.86328125, 906.1328125, 0, 764.46484375, 911.82421875, 0, 760.0546875, 917.5546875, 0, 749.6171875, 922.6015625, 0, 742.46484375, 927.171875, 0, 743.2890625, 938.2421875, 0, 743.640625, 943.13671875, 0, 732.29296875, 943.7109375, 0, 726.51171875, 944.20703125, 0, 721.80859375, 939.96875, 0, 722.1875, 930.15234375, 0, 721.51171875, 922.19921875, 0, 713.7265625, 921.40234375, 0, 707.83203125, 920.6171875, 0, 701.0703125, 922.07421875, 0, 695.50390625, 925.23828125, 0, 694.44140625, 929.375, 0, 687.9140625, 930.42578125, 0, 676.3203125, 930.42578125, 0, 682.51171875, 942.21484375, 0, 684.6953125, 1017.125, 0, 710.00390625, 1014.71484375, 0, 719.28125, 1027.56640625, 0, 727.5, 1025.2734375, 0, 730.32421875, 1024.12890625, 0, 731.94140625, 1000.578125, 0, 748.07421875, 1008.64453125, 0, 875.34375, 1024.19921875, 0, 996.6953125, 1054.38671875, 0, 997.46484375, 1045.8359375, 0, 1024.60546875, 1040.07421875, 0, 1025.4453125, 1031.21484375, 0, 1058.3828125, 1029.21875, 0, 1123.41796875, 1010.1328125, 0, 1140.09765625, 998.296875, 0, 1181.109375, 984.57421875, 0, 1210.62890625, 976.2109375, 0, 1249.5390625, 958.08203125, 0, 1292.57421875, 949.14453125, 0, 1310.7578125, 944.390625, 0, 1359.42578125, 959.54296875, 0, 1380.1640625, 968.48046875, 0, 1393.78515625, 966.22265625, 0, 1504.9375, 1019.8984375, 0, 1730.171875, 1002.4921875, 0]

const vertexBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

const vsSource = `
    attribute vec4 aVertexPosition;
    uniform mat4 uModelViewMatrix;
    uniform mat4 uProjectionMatrix;
    void main(void) {
        gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;
        gl_PointSize = 15.0; // Adjust point size as needed
    }
`;

const fsSource = `
    void main(void) {
        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0); // White color
    }
`;

// Create shader
const vertexShader = gl.createShader(gl.VERTEX_SHADER);
gl.shaderSource(vertexShader, vsSource);
gl.compileShader(vertexShader);

const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
gl.shaderSource(fragmentShader, fsSource);
gl.compileShader(fragmentShader);

// Create shader program
const shaderProgram = gl.createProgram();
gl.attachShader(shaderProgram, vertexShader);
gl.attachShader(shaderProgram, fragmentShader);
gl.linkProgram(shaderProgram);
gl.useProgram(shaderProgram);


loop = function() {
// Bind buffer
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    const vertexPosition = gl.getAttribLocation(shaderProgram, 'aVertexPosition');
    gl.vertexAttribPointer(vertexPosition, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(vertexPosition);

    // Set the clear color and clear the canvas
    gl.clearColor(0.0, 0.0, 0.0, 1.0); // Black background
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.viewport(0, 0, 3000, 6000)

    // Set up projection matrix
    const projectionMatrix = glMatrix.mat4.create();
    glMatrix.mat4.perspective(projectionMatrix, Math.PI / 4, canvas.width / canvas.height, 0.1, 3000.0);
    const projectionMatrixLocation = gl.getUniformLocation(shaderProgram, 'uProjectionMatrix');
    gl.uniformMatrix4fv(projectionMatrixLocation, false, projectionMatrix);

    // Set up view matrix (lookAt)
    const eye = [1000, 500, -2000]; // Camera position
    const center = [1000, 500, 0]; // Target position
    const up = [0, -1, 0]; // Up direction
    const viewMatrix = glMatrix.mat4.create();
    glMatrix.mat4.lookAt(viewMatrix, eye, center, up);
    const viewMatrixLocation = gl.getUniformLocation(shaderProgram, 'uModelViewMatrix');
    gl.uniformMatrix4fv(viewMatrixLocation, false, viewMatrix);

// Render
    gl.drawArrays(gl.LINE_STRIP, 0, vertices.length / 3);
    requestAnimationFrame(loop)
}

requestAnimationFrame(loop)